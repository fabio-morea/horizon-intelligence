---
title: "figure2"
format: html
editor: visual
---

```{r}
library(igraph)
library(tidyverse)
source('./code/hi_0_parameters.R')
source('./code/hi_functions.R')

```

```{r}

for(yy in 2016:2016){
    print(yy)
    
    # Load the graph
    g <- read.graph(file = paste0('data/filtered-h/', yy, '.graphml'),
                   format = 'graphml')
    
    # Step 1: Extract Subgraph with 'tech' edges (tech == TRUE)
    g_tech <- delete_edges(g, E(g)[E(g)$tech == FALSE])
    g_tech <- delete_vertices(g_tech, V(g_tech)[degree(g_tech) == 0])
    
    # Step 2: Extract Subgraph with 'market' edges (tech == FALSE)
    g_market <- delete_edges(g, E(g)[E(g)$tech == TRUE])
    g_market <- delete_vertices(g_market, V(g_market)[degree(g_market) == 0])
    
    # Step 3: Create Data Frame with Vertex Attributes
    df_org <- tibble(orgID = V(g)$name,
                     weight = V(g)$str)
    
    
    df_tech <- tibble(orgID = V(g_tech)$name,
                      weight_tech = V(g_tech)$str)
    
    df_market <- tibble(orgID = V(g_market)$name,
                        weight_market = V(g_market)$str)

    # Step 4: Join data frames to merge the weights back into the original orgID list
    dfstr <- df_tech %>%
        #left_join(df_tech, by = "orgID") %>%
        left_join(df_market, by = "orgID") %>%
        mutate(            # Replace NA with 0.0 for missing weights
            weight_tech = coalesce(weight_tech, 0.0),
            weight_market = coalesce(weight_market, 0.0) 
        )


}
 dfstr |> arrange(-weight)

```

```{r}
perc_tech 
(1-perc_tech) |> barplot()
```

# 3 networks

```{r}
# complete
yy = 2024

g <- read.graph(file = paste0('data/filtered-h/',yy,'.graphml'),format = 'graphml') 
print(paste("G: ", mean(E(g)$tech), "vertices: ", vcount(g), "edges: ", ecount(g)))

g <- delete_edges(g,  E(g)[E(g)$tech == FALSE] )

g_market <- delete_edges(g,  E(g)[E(g)$tech == TRUE] )

g <- igraph::simplify(g, edge.attr.comb = "sum")
print(paste("G: ", mean(E(g)$tech), "vertices: ", vcount(g), "edges: ", ecount(g)))

#png(paste0('./figures/2-full network/',yy,'.png'))

par(mar=c(0,0,0,0))
plot(g, vertex.label = NA, 
     vertex.size = sqrt(V(g)$R_strength) *50,
     vertex.color = V(g)$community,
     layout = layout_with_graphopt(g), 
     #main = yy, 
     asp = 1.0)
#dev.off()

```

```{r}
# complete
yy = 2024

g <- read.graph(file = paste0('data/filtered-h/',yy,'.graphml'),format = 'graphml') 
print(paste("G: ", mean(E(g)$tech), "vertices: ", vcount(g), "edges: ", ecount(g)))
# V(g)$R_strength<-round(V(g)$R_strength,5)
# g <- delete_vertices(g, V(g)[V(g)$R_strength ==0])

g <- delete_edges(g,  E(g)[E(g)$tech == TRUE] )
g <- delete_vertices(g, V(g)[degree(g) ==0]) 
g <- igraph::simplify(g, edge.attr.comb = "sum")
print(paste("G: ", mean(E(g)$tech), "vertices: ", vcount(g), "edges: ", ecount(g)))

#png(paste0('./figures/2-full network/',yy,'.png'))

par(mar=c(0,0,0,0))
plot(g, vertex.label = NA, 
     vertex.size = sqrt(V(g)$R_strength) *30,
     vertex.color = V(g)$community,
     layout = layout_with_graphopt(g), 
     #main = yy, 
     asp = 1)
#dev.off()

```

```{r}
print("hello")
```
